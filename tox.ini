[tox]
envlist =
    lint,
    codespell,
    check-migrations,
    test-rgd,
    test-rgd-3d,
    test-rgd-fmv,
    test-rgd-geometry,
    test-rgd-imagery,

[testenv]
basepython=python3.8
skipsdist = true
skip_install = true
setenv =
    PIP_FIND_LINKS = https://girder.github.io/large_image_wheels
passenv =
    CELERY_BROKER_URL
    DATABASE_URL
    DATABASE_HOST
    MINIO_STORAGE_ACCESS_KEY
    MINIO_STORAGE_ENDPOINT
    MINIO_STORAGE_SECRET_KEY

[testenv:lint]
deps =
    flake8
    flake8-black
    flake8-bugbear
    flake8-docstrings
    flake8-isort
    flake8-quotes
    pep8-naming
commands =
    flake8 {posargs:.}

[testenv:codespell]
deps =
    codespell
commands =
    codespell \
      -S "*.pyc,*.txt,*.gif,*.png,*.jpg,*.pickle,*.ipynb,*node_modules,*static,./.tox,./.git,*.egg-info" \
      {posargs}

[testenv:type]
usedevelop = true
deps =
    mypy
    django-stubs
    djangorestframework-stubs
commands =
    mypy {posargs:.}

[testenv:format]
deps =
    black
    isort
commands =
    isort {posargs:.}
    black {posargs:.}

[testenv:check-migrations]
deps =
    -e ./django-rgd[configuration]
    -e ./django-rgd-3d
    -e ./django-rgd-fmv
    -e ./django-rgd-geometry
    -e ./django-rgd-imagery
    -e ./example_project
passenv =
    DJANGO_CONFIGURATION
    DJANGO_DATABASE_URL
    DJANGO_CELERY_BROKER_URL
    DJANGO_MINIO_STORAGE_ENDPOINT
    DJANGO_MINIO_STORAGE_ACCESS_KEY
    DJANGO_MINIO_STORAGE_SECRET_KEY
    DJANGO_STORAGE_BUCKET_NAME
    DJANGO_MINIO_STORAGE_MEDIA_URL

commands =
    {envpython} ./example_project/manage.py makemigrations --check --dry-run

[testenv:graph-models]
deps =
    -e ./django-rgd[configuration]
    -e ./django-rgd-3d
    -e ./django-rgd-fmv
    -e ./django-rgd-geometry
    -e ./django-rgd-imagery
    -e ./example_project[graph]
passenv =
    DJANGO_CONFIGURATION
    DJANGO_DATABASE_URL
    DJANGO_CELERY_BROKER_URL
    DJANGO_MINIO_STORAGE_ENDPOINT
    DJANGO_MINIO_STORAGE_ACCESS_KEY
    DJANGO_MINIO_STORAGE_SECRET_KEY
    DJANGO_STORAGE_BUCKET_NAME
    DJANGO_MINIO_STORAGE_MEDIA_URL
whitelist_externals = mkdir
commands =
    mkdir -p {toxworkdir}/graphs/
    {envpython} ./example_project/manage.py graph_models rgd -o {toxworkdir}/graphs/rgd.png
    {envpython} ./example_project/manage.py graph_models rgd_3d -o {toxworkdir}/graphs/rgd-3d.png
    {envpython} ./example_project/manage.py graph_models rgd_fmv -o {toxworkdir}/graphs/rgd-fmv.png
    {envpython} ./example_project/manage.py graph_models rgd_geometry -o {toxworkdir}/graphs/rgd-geometry.png
    {envpython} ./example_project/manage.py graph_models rgd_imagery -o {toxworkdir}/graphs/rgd-imagery.png
    {envpython} ./example_project/manage.py graph_models rgd rgd_3d rgd_fmv rgd_geometry rgd_imagery -g -o {toxworkdir}/graphs/rgd-all.png


[testenv:test-rgd]
changedir = django-rgd/tests
deps =
    -r requirements.txt
    -e django-rgd/client
commands =
    pytest --cov=rgd {posargs}
    coverage html -d {toxworkdir}/htmlcov/django-rgd
    coverage xml -o {toxworkdir}/coverage/django-rgd.xml

[testenv:test-rgd-3d]
changedir = django-rgd-3d/tests
deps =
    -r requirements.txt
    -e ./django-rgd-3d[worker]
commands =
    pytest --cov=rgd --cov=rgd_3d {posargs}
    coverage html -d {toxworkdir}/htmlcov/django-rgd-3d
    coverage xml -o {toxworkdir}/coverage/django-rgd-3d.xml

[testenv:test-rgd-fmv]
changedir = django-rgd-fmv/tests
deps =
    -r requirements.txt
    -e ./django-rgd-fmv[worker]
commands =
    pytest --cov=rgd --cov=rgd_fmv {posargs}
    coverage html -d {toxworkdir}/htmlcov/django-rgd-fmv
    coverage xml -o {toxworkdir}/coverage/django-rgd-fmv.xml

[testenv:test-rgd-geometry]
changedir = django-rgd-geometry/tests
deps =
    -r requirements.txt
    -e ./django-rgd-geometry[worker]
commands =
    pytest --cov=rgd --cov=rgd_geometry {posargs}
    coverage html -d {toxworkdir}/htmlcov/django-rgd-geometry
    coverage xml -o {toxworkdir}/coverage/django-rgd-geometry.xml

[testenv:test-rgd-imagery]
changedir = django-rgd-imagery/tests
deps =
    -r requirements.txt
    -e ./django-rgd-imagery[worker]
    -e django-rgd/client
    -e django-rgd-imagery/client
commands =
    pytest --cov=rgd --cov=rgd_imagery {posargs}
    coverage html -d {toxworkdir}/htmlcov/django-rgd-imagery
    coverage xml -o {toxworkdir}/coverage/django-rgd-imagery.xml

[testenv:coverage-report]
deps =
    pytest-cov
commands =
    coverage combine ./django-rgd/tests/.coverage ./django-rgd-3d/tests/.coverage ./django-rgd-geometry/tests/.coverage ./django-rgd-imagery/tests/.coverage ./django-rgd-fmv/tests/.coverage
    coverage html -d {toxworkdir}/htmlcov/all
    coverage xml -o {toxworkdir}/coverage/all.xml

[testenv:dev]
deps =
    {[testenv:lint]deps}
    {[testenv:type]deps}
    {[testenv:format]deps}
    {[testenv:test-rgd]deps}
    {[testenv:test-rgd-3d]deps}
    {[testenv:test-rgd-fmv]deps}
    {[testenv:test-rgd-geometry]deps}
    {[testenv:test-rgd-imagery]deps}

[flake8]
max-line-length = 2048
show-source = True
exclude =
    env37
    env38
    .git
    .tox
    __pycache__
    */*egg*/*
    .venv
    */node_modules
ignore =
    # closing bracket does not match indentation of opening bracketâ€™s line
    E123
    # whitespace before ':'
    E203,
    # line break before binary operator
    W503,
    # Missing docstring in *
    D10,

[pytest]
DJANGO_SETTINGS_MODULE = test_project.settings
addopts = --strict-markers --showlocals --verbose --durations=0
filterwarnings =
    ignore:.*default_app_config*.:django.utils.deprecation.RemovedInDjango41Warning
    ignore::DeprecationWarning:minio
    ignore::DeprecationWarning:configurations
    ignore::django.utils.deprecation.RemovedInDjango40Warning:djproxy

[coverage:run]
branch = True
